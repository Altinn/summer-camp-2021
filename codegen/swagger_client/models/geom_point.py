# coding: utf-8

"""
    Åpent adresse-API fra Kartverket

    API for oppslag av adresser i matrikkelen.             Det er ikke nødvendig med innlogging/autorisasjon for å bruke API-et.             Større funksjonalitetsødeleggende endringer i API-et vil bli annonsert minst 3 måneder i forveien på https://geonorge.no/aktuelt/varsler/Tjenestevarsler/             API-et returnerer kun de første 10 000 resultatene. Hvis man ønsker å hente ned større datasett så anbefales det å laste ned filene som er tilgjengelige fra https://geonorge.no .           # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeomPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'epsg': 'str',
        'lat': 'float',
        'lon': 'float'
    }

    attribute_map = {
        'epsg': 'epsg',
        'lat': 'lat',
        'lon': 'lon'
    }

    def __init__(self, epsg=None, lat=None, lon=None):  # noqa: E501
        """GeomPoint - a model defined in Swagger"""  # noqa: E501
        self._epsg = None
        self._lat = None
        self._lon = None
        self.discriminator = None
        if epsg is not None:
            self.epsg = epsg
        self.lat = lat
        self.lon = lon

    @property
    def epsg(self):
        """Gets the epsg of this GeomPoint.  # noqa: E501

        Koordinatsystem til punktet. Angitt vha EPSG-kode.  # noqa: E501

        :return: The epsg of this GeomPoint.  # noqa: E501
        :rtype: str
        """
        return self._epsg

    @epsg.setter
    def epsg(self, epsg):
        """Sets the epsg of this GeomPoint.

        Koordinatsystem til punktet. Angitt vha EPSG-kode.  # noqa: E501

        :param epsg: The epsg of this GeomPoint.  # noqa: E501
        :type: str
        """

        self._epsg = epsg

    @property
    def lat(self):
        """Gets the lat of this GeomPoint.  # noqa: E501

        Geografiske lat/nord koordinater, med mindre annet er spesifisert.  # noqa: E501

        :return: The lat of this GeomPoint.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this GeomPoint.

        Geografiske lat/nord koordinater, med mindre annet er spesifisert.  # noqa: E501

        :param lat: The lat of this GeomPoint.  # noqa: E501
        :type: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this GeomPoint.  # noqa: E501

        Geografiske lon/øst koordinater, med mindre annet er spesifisert.  # noqa: E501

        :return: The lon of this GeomPoint.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this GeomPoint.

        Geografiske lon/øst koordinater, med mindre annet er spesifisert.  # noqa: E501

        :param lon: The lon of this GeomPoint.  # noqa: E501
        :type: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeomPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeomPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
