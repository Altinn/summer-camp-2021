# coding: utf-8

"""
    Åpent adresse-API fra Kartverket

    API for oppslag av adresser i matrikkelen.             Det er ikke nødvendig med innlogging/autorisasjon for å bruke API-et.             Større funksjonalitetsødeleggende endringer i API-et vil bli annonsert minst 3 måneder i forveien på https://geonorge.no/aktuelt/varsler/Tjenestevarsler/             API-et returnerer kun de første 10 000 resultatene. Hvis man ønsker å hente ned større datasett så anbefales det å laste ned filene som er tilgjengelige fra https://geonorge.no .           # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OutputAdresse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adressekode': 'int',
        'adressenavn': 'str',
        'adressetekst': 'str',
        'adressetekstutenadressetilleggsnavn': 'str',
        'adressetilleggsnavn': 'str',
        'bokstav': 'str',
        'bruksenhetsnummer': 'list[str]',
        'bruksnummer': 'int',
        'festenummer': 'int',
        'gardsnummer': 'int',
        'kommunenavn': 'str',
        'kommunenummer': 'str',
        'nummer': 'int',
        'objtype': 'str',
        'oppdateringsdato': 'datetime',
        'postnummer': 'str',
        'poststed': 'str',
        'representasjonspunkt': 'GeomPoint',
        'stedfestingverifisert': 'bool',
        'undernummer': 'int'
    }

    attribute_map = {
        'adressekode': 'adressekode',
        'adressenavn': 'adressenavn',
        'adressetekst': 'adressetekst',
        'adressetekstutenadressetilleggsnavn': 'adressetekstutenadressetilleggsnavn',
        'adressetilleggsnavn': 'adressetilleggsnavn',
        'bokstav': 'bokstav',
        'bruksenhetsnummer': 'bruksenhetsnummer',
        'bruksnummer': 'bruksnummer',
        'festenummer': 'festenummer',
        'gardsnummer': 'gardsnummer',
        'kommunenavn': 'kommunenavn',
        'kommunenummer': 'kommunenummer',
        'nummer': 'nummer',
        'objtype': 'objtype',
        'oppdateringsdato': 'oppdateringsdato',
        'postnummer': 'postnummer',
        'poststed': 'poststed',
        'representasjonspunkt': 'representasjonspunkt',
        'stedfestingverifisert': 'stedfestingverifisert',
        'undernummer': 'undernummer'
    }

    def __init__(self, adressekode=None, adressenavn=None, adressetekst=None, adressetekstutenadressetilleggsnavn=None, adressetilleggsnavn=None, bokstav=None, bruksenhetsnummer=None, bruksnummer=None, festenummer=None, gardsnummer=None, kommunenavn=None, kommunenummer=None, nummer=None, objtype=None, oppdateringsdato=None, postnummer=None, poststed=None, representasjonspunkt=None, stedfestingverifisert=None, undernummer=None):  # noqa: E501
        """OutputAdresse - a model defined in Swagger"""  # noqa: E501
        self._adressekode = None
        self._adressenavn = None
        self._adressetekst = None
        self._adressetekstutenadressetilleggsnavn = None
        self._adressetilleggsnavn = None
        self._bokstav = None
        self._bruksenhetsnummer = None
        self._bruksnummer = None
        self._festenummer = None
        self._gardsnummer = None
        self._kommunenavn = None
        self._kommunenummer = None
        self._nummer = None
        self._objtype = None
        self._oppdateringsdato = None
        self._postnummer = None
        self._poststed = None
        self._representasjonspunkt = None
        self._stedfestingverifisert = None
        self._undernummer = None
        self.discriminator = None
        if adressekode is not None:
            self.adressekode = adressekode
        if adressenavn is not None:
            self.adressenavn = adressenavn
        if adressetekst is not None:
            self.adressetekst = adressetekst
        if adressetekstutenadressetilleggsnavn is not None:
            self.adressetekstutenadressetilleggsnavn = adressetekstutenadressetilleggsnavn
        if adressetilleggsnavn is not None:
            self.adressetilleggsnavn = adressetilleggsnavn
        if bokstav is not None:
            self.bokstav = bokstav
        if bruksenhetsnummer is not None:
            self.bruksenhetsnummer = bruksenhetsnummer
        if bruksnummer is not None:
            self.bruksnummer = bruksnummer
        if festenummer is not None:
            self.festenummer = festenummer
        if gardsnummer is not None:
            self.gardsnummer = gardsnummer
        if kommunenavn is not None:
            self.kommunenavn = kommunenavn
        if kommunenummer is not None:
            self.kommunenummer = kommunenummer
        if nummer is not None:
            self.nummer = nummer
        if objtype is not None:
            self.objtype = objtype
        if oppdateringsdato is not None:
            self.oppdateringsdato = oppdateringsdato
        if postnummer is not None:
            self.postnummer = postnummer
        if poststed is not None:
            self.poststed = poststed
        if representasjonspunkt is not None:
            self.representasjonspunkt = representasjonspunkt
        if stedfestingverifisert is not None:
            self.stedfestingverifisert = stedfestingverifisert
        if undernummer is not None:
            self.undernummer = undernummer

    @property
    def adressekode(self):
        """Gets the adressekode of this OutputAdresse.  # noqa: E501

        Nummer som entydig identifiserer adresserbare gater, veger, stier, plasser og områder som er ført i matrikkelen innen kommunen  # noqa: E501

        :return: The adressekode of this OutputAdresse.  # noqa: E501
        :rtype: int
        """
        return self._adressekode

    @adressekode.setter
    def adressekode(self, adressekode):
        """Sets the adressekode of this OutputAdresse.

        Nummer som entydig identifiserer adresserbare gater, veger, stier, plasser og områder som er ført i matrikkelen innen kommunen  # noqa: E501

        :param adressekode: The adressekode of this OutputAdresse.  # noqa: E501
        :type: int
        """

        self._adressekode = adressekode

    @property
    def adressenavn(self):
        """Gets the adressenavn of this OutputAdresse.  # noqa: E501

        Navn på gate, veg, sti, plass eller område som er ført i matrikkelen (eksempel Sørumvegen).  # noqa: E501

        :return: The adressenavn of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._adressenavn

    @adressenavn.setter
    def adressenavn(self, adressenavn):
        """Sets the adressenavn of this OutputAdresse.

        Navn på gate, veg, sti, plass eller område som er ført i matrikkelen (eksempel Sørumvegen).  # noqa: E501

        :param adressenavn: The adressenavn of this OutputAdresse.  # noqa: E501
        :type: str
        """

        self._adressenavn = adressenavn

    @property
    def adressetekst(self):
        """Gets the adressetekst of this OutputAdresse.  # noqa: E501

        Del av offisiell adresse, men uten bruksenhetsnummer som ligger til bruksenheter/boliger (ligger her som egenskap til vegadressen) Eksempel: \"Storgata 2B\" eller \"123/4-2\" Der det i tillegg er adressetilleggsnavn: \"Haugen, Storgata 2B\" eller \"Midtgard, 123/4-2\"  # noqa: E501

        :return: The adressetekst of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._adressetekst

    @adressetekst.setter
    def adressetekst(self, adressetekst):
        """Sets the adressetekst of this OutputAdresse.

        Del av offisiell adresse, men uten bruksenhetsnummer som ligger til bruksenheter/boliger (ligger her som egenskap til vegadressen) Eksempel: \"Storgata 2B\" eller \"123/4-2\" Der det i tillegg er adressetilleggsnavn: \"Haugen, Storgata 2B\" eller \"Midtgard, 123/4-2\"  # noqa: E501

        :param adressetekst: The adressetekst of this OutputAdresse.  # noqa: E501
        :type: str
        """

        self._adressetekst = adressetekst

    @property
    def adressetekstutenadressetilleggsnavn(self):
        """Gets the adressetekstutenadressetilleggsnavn of this OutputAdresse.  # noqa: E501

        Del av offisiell adresse, men uten bruksenhetsnummer som ligger til bruksenheter/boliger og adressetilleggsnavn Eksempel: \"Storgata 2B\" eller \"123/4-2\"  # noqa: E501

        :return: The adressetekstutenadressetilleggsnavn of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._adressetekstutenadressetilleggsnavn

    @adressetekstutenadressetilleggsnavn.setter
    def adressetekstutenadressetilleggsnavn(self, adressetekstutenadressetilleggsnavn):
        """Sets the adressetekstutenadressetilleggsnavn of this OutputAdresse.

        Del av offisiell adresse, men uten bruksenhetsnummer som ligger til bruksenheter/boliger og adressetilleggsnavn Eksempel: \"Storgata 2B\" eller \"123/4-2\"  # noqa: E501

        :param adressetekstutenadressetilleggsnavn: The adressetekstutenadressetilleggsnavn of this OutputAdresse.  # noqa: E501
        :type: str
        """

        self._adressetekstutenadressetilleggsnavn = adressetekstutenadressetilleggsnavn

    @property
    def adressetilleggsnavn(self):
        """Gets the adressetilleggsnavn of this OutputAdresse.  # noqa: E501

        Nedarvet bruksnavn, navn på en institusjon eller bygning eller grend brukt som del av den offisielle adressen  # noqa: E501

        :return: The adressetilleggsnavn of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._adressetilleggsnavn

    @adressetilleggsnavn.setter
    def adressetilleggsnavn(self, adressetilleggsnavn):
        """Sets the adressetilleggsnavn of this OutputAdresse.

        Nedarvet bruksnavn, navn på en institusjon eller bygning eller grend brukt som del av den offisielle adressen  # noqa: E501

        :param adressetilleggsnavn: The adressetilleggsnavn of this OutputAdresse.  # noqa: E501
        :type: str
        """

        self._adressetilleggsnavn = adressetilleggsnavn

    @property
    def bokstav(self):
        """Gets the bokstav of this OutputAdresse.  # noqa: E501

        Del av adressenummer (husnummer) som er et nummer og en eventuelt en bokstav, f.eks 23B. For å kun søke på adresser uten noen bokstav så inkluderer man \"bokstav=\" i søkestrengen uten å fylle inn noen verdi.  # noqa: E501

        :return: The bokstav of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._bokstav

    @bokstav.setter
    def bokstav(self, bokstav):
        """Sets the bokstav of this OutputAdresse.

        Del av adressenummer (husnummer) som er et nummer og en eventuelt en bokstav, f.eks 23B. For å kun søke på adresser uten noen bokstav så inkluderer man \"bokstav=\" i søkestrengen uten å fylle inn noen verdi.  # noqa: E501

        :param bokstav: The bokstav of this OutputAdresse.  # noqa: E501
        :type: str
        """

        self._bokstav = bokstav

    @property
    def bruksenhetsnummer(self):
        """Gets the bruksenhetsnummer of this OutputAdresse.  # noqa: E501


        :return: The bruksenhetsnummer of this OutputAdresse.  # noqa: E501
        :rtype: list[str]
        """
        return self._bruksenhetsnummer

    @bruksenhetsnummer.setter
    def bruksenhetsnummer(self, bruksenhetsnummer):
        """Sets the bruksenhetsnummer of this OutputAdresse.


        :param bruksenhetsnummer: The bruksenhetsnummer of this OutputAdresse.  # noqa: E501
        :type: list[str]
        """

        self._bruksenhetsnummer = bruksenhetsnummer

    @property
    def bruksnummer(self):
        """Gets the bruksnummer of this OutputAdresse.  # noqa: E501

        Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knyting mot seksjon)  # noqa: E501

        :return: The bruksnummer of this OutputAdresse.  # noqa: E501
        :rtype: int
        """
        return self._bruksnummer

    @bruksnummer.setter
    def bruksnummer(self, bruksnummer):
        """Sets the bruksnummer of this OutputAdresse.

        Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knyting mot seksjon)  # noqa: E501

        :param bruksnummer: The bruksnummer of this OutputAdresse.  # noqa: E501
        :type: int
        """

        self._bruksnummer = bruksnummer

    @property
    def festenummer(self):
        """Gets the festenummer of this OutputAdresse.  # noqa: E501

        Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knytning mot seksjon)  # noqa: E501

        :return: The festenummer of this OutputAdresse.  # noqa: E501
        :rtype: int
        """
        return self._festenummer

    @festenummer.setter
    def festenummer(self, festenummer):
        """Sets the festenummer of this OutputAdresse.

        Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knytning mot seksjon)  # noqa: E501

        :param festenummer: The festenummer of this OutputAdresse.  # noqa: E501
        :type: int
        """

        self._festenummer = festenummer

    @property
    def gardsnummer(self):
        """Gets the gardsnummer of this OutputAdresse.  # noqa: E501

        Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knyting mot seksjon)  # noqa: E501

        :return: The gardsnummer of this OutputAdresse.  # noqa: E501
        :rtype: int
        """
        return self._gardsnummer

    @gardsnummer.setter
    def gardsnummer(self, gardsnummer):
        """Sets the gardsnummer of this OutputAdresse.

        Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knyting mot seksjon)  # noqa: E501

        :param gardsnummer: The gardsnummer of this OutputAdresse.  # noqa: E501
        :type: int
        """

        self._gardsnummer = gardsnummer

    @property
    def kommunenavn(self):
        """Gets the kommunenavn of this OutputAdresse.  # noqa: E501

        Navn (norsk) på en kommune  # noqa: E501

        :return: The kommunenavn of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._kommunenavn

    @kommunenavn.setter
    def kommunenavn(self, kommunenavn):
        """Sets the kommunenavn of this OutputAdresse.

        Navn (norsk) på en kommune  # noqa: E501

        :param kommunenavn: The kommunenavn of this OutputAdresse.  # noqa: E501
        :type: str
        """

        self._kommunenavn = kommunenavn

    @property
    def kommunenummer(self):
        """Gets the kommunenummer of this OutputAdresse.  # noqa: E501

        Nummerering av kommunen i henhold til Statistisk sentralbyrå sin offisielle liste. Tekstverdi som må bestå av 4 tall. 0301 er for eksempel gyldig, mens 301 er ikke gyldig.  # noqa: E501

        :return: The kommunenummer of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._kommunenummer

    @kommunenummer.setter
    def kommunenummer(self, kommunenummer):
        """Sets the kommunenummer of this OutputAdresse.

        Nummerering av kommunen i henhold til Statistisk sentralbyrå sin offisielle liste. Tekstverdi som må bestå av 4 tall. 0301 er for eksempel gyldig, mens 301 er ikke gyldig.  # noqa: E501

        :param kommunenummer: The kommunenummer of this OutputAdresse.  # noqa: E501
        :type: str
        """

        self._kommunenummer = kommunenummer

    @property
    def nummer(self):
        """Gets the nummer of this OutputAdresse.  # noqa: E501

        Del av adressenummer (husnummer) som er et nummer og eventuelt en bokstav, f.eks 23B  # noqa: E501

        :return: The nummer of this OutputAdresse.  # noqa: E501
        :rtype: int
        """
        return self._nummer

    @nummer.setter
    def nummer(self, nummer):
        """Sets the nummer of this OutputAdresse.

        Del av adressenummer (husnummer) som er et nummer og eventuelt en bokstav, f.eks 23B  # noqa: E501

        :param nummer: The nummer of this OutputAdresse.  # noqa: E501
        :type: int
        """

        self._nummer = nummer

    @property
    def objtype(self):
        """Gets the objtype of this OutputAdresse.  # noqa: E501

        Vegadresse er offisiell adresse i form av et adressenavn og et adressenummer (Storgata 10). Der kommunen ikke har gått over til vegadresser, vil det finnes matrikkeladresse på formen: gårdsnummer/ bruksnummer/ev festenummer-ev undernummer (10/2) Begge adressetypene kan ha bruksenhetsnummer (leiligheter) og adressetilleggsnavn. Begge adressetypene vises som standard, hvis man kun ønsker å se en av de kan man spesifisere adressetypen via dette parameteret.  # noqa: E501

        :return: The objtype of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._objtype

    @objtype.setter
    def objtype(self, objtype):
        """Sets the objtype of this OutputAdresse.

        Vegadresse er offisiell adresse i form av et adressenavn og et adressenummer (Storgata 10). Der kommunen ikke har gått over til vegadresser, vil det finnes matrikkeladresse på formen: gårdsnummer/ bruksnummer/ev festenummer-ev undernummer (10/2) Begge adressetypene kan ha bruksenhetsnummer (leiligheter) og adressetilleggsnavn. Begge adressetypene vises som standard, hvis man kun ønsker å se en av de kan man spesifisere adressetypen via dette parameteret.  # noqa: E501

        :param objtype: The objtype of this OutputAdresse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Vegadresse", "Matrikkeladresse"]  # noqa: E501
        if objtype not in allowed_values:
            raise ValueError(
                "Invalid value for `objtype` ({0}), must be one of {1}"  # noqa: E501
                .format(objtype, allowed_values)
            )

        self._objtype = objtype

    @property
    def oppdateringsdato(self):
        """Gets the oppdateringsdato of this OutputAdresse.  # noqa: E501

        Dato for siste endring på objektdataene  # noqa: E501

        :return: The oppdateringsdato of this OutputAdresse.  # noqa: E501
        :rtype: datetime
        """
        return self._oppdateringsdato

    @oppdateringsdato.setter
    def oppdateringsdato(self, oppdateringsdato):
        """Sets the oppdateringsdato of this OutputAdresse.

        Dato for siste endring på objektdataene  # noqa: E501

        :param oppdateringsdato: The oppdateringsdato of this OutputAdresse.  # noqa: E501
        :type: datetime
        """

        self._oppdateringsdato = oppdateringsdato

    @property
    def postnummer(self):
        """Gets the postnummer of this OutputAdresse.  # noqa: E501

        Unik identifikasjon av et postnummerområde. Tekstverdi som må bestå av 4 tall. 0340 er for eksempel gyldig, mens 340 er ikke gyldig.  # noqa: E501

        :return: The postnummer of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._postnummer

    @postnummer.setter
    def postnummer(self, postnummer):
        """Sets the postnummer of this OutputAdresse.

        Unik identifikasjon av et postnummerområde. Tekstverdi som må bestå av 4 tall. 0340 er for eksempel gyldig, mens 340 er ikke gyldig.  # noqa: E501

        :param postnummer: The postnummer of this OutputAdresse.  # noqa: E501
        :type: str
        """

        self._postnummer = postnummer

    @property
    def poststed(self):
        """Gets the poststed of this OutputAdresse.  # noqa: E501

        Navn på poststed i henhold til Postens egne lister  # noqa: E501

        :return: The poststed of this OutputAdresse.  # noqa: E501
        :rtype: str
        """
        return self._poststed

    @poststed.setter
    def poststed(self, poststed):
        """Sets the poststed of this OutputAdresse.

        Navn på poststed i henhold til Postens egne lister  # noqa: E501

        :param poststed: The poststed of this OutputAdresse.  # noqa: E501
        :type: str
        """

        self._poststed = poststed

    @property
    def representasjonspunkt(self):
        """Gets the representasjonspunkt of this OutputAdresse.  # noqa: E501


        :return: The representasjonspunkt of this OutputAdresse.  # noqa: E501
        :rtype: GeomPoint
        """
        return self._representasjonspunkt

    @representasjonspunkt.setter
    def representasjonspunkt(self, representasjonspunkt):
        """Sets the representasjonspunkt of this OutputAdresse.


        :param representasjonspunkt: The representasjonspunkt of this OutputAdresse.  # noqa: E501
        :type: GeomPoint
        """

        self._representasjonspunkt = representasjonspunkt

    @property
    def stedfestingverifisert(self):
        """Gets the stedfestingverifisert of this OutputAdresse.  # noqa: E501

        Angivelse om stedfestingen (koordinatene) er kontrollert og funnet i orden (verifisert)  # noqa: E501

        :return: The stedfestingverifisert of this OutputAdresse.  # noqa: E501
        :rtype: bool
        """
        return self._stedfestingverifisert

    @stedfestingverifisert.setter
    def stedfestingverifisert(self, stedfestingverifisert):
        """Sets the stedfestingverifisert of this OutputAdresse.

        Angivelse om stedfestingen (koordinatene) er kontrollert og funnet i orden (verifisert)  # noqa: E501

        :param stedfestingverifisert: The stedfestingverifisert of this OutputAdresse.  # noqa: E501
        :type: bool
        """

        self._stedfestingverifisert = stedfestingverifisert

    @property
    def undernummer(self):
        """Gets the undernummer of this OutputAdresse.  # noqa: E501

        Fortløpende nummerering av matrikkeladresser med samme gårds-, bruks- og festenummer.  # noqa: E501

        :return: The undernummer of this OutputAdresse.  # noqa: E501
        :rtype: int
        """
        return self._undernummer

    @undernummer.setter
    def undernummer(self, undernummer):
        """Sets the undernummer of this OutputAdresse.

        Fortløpende nummerering av matrikkeladresser med samme gårds-, bruks- og festenummer.  # noqa: E501

        :param undernummer: The undernummer of this OutputAdresse.  # noqa: E501
        :type: int
        """

        self._undernummer = undernummer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutputAdresse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutputAdresse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
