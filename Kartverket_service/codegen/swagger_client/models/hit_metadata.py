# coding: utf-8

"""
    Åpent adresse-API fra Kartverket

    API for oppslag av adresser i matrikkelen.             Det er ikke nødvendig med innlogging/autorisasjon for å bruke API-et.             Større funksjonalitetsødeleggende endringer i API-et vil bli annonsert minst 3 måneder i forveien på https://geonorge.no/aktuelt/varsler/Tjenestevarsler/             API-et returnerer kun de første 10 000 resultatene. Hvis man ønsker å hente ned større datasett så anbefales det å laste ned filene som er tilgjengelige fra https://geonorge.no .           # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HitMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ascii_kompatibel': 'bool',
        'side': 'int',
        'soke_streng': 'str',
        'totalt_antall_treff': 'int',
        'treff_per_side': 'int',
        'viser_fra': 'int',
        'viser_til': 'int'
    }

    attribute_map = {
        'ascii_kompatibel': 'asciiKompatibel',
        'side': 'side',
        'soke_streng': 'sokeStreng',
        'totalt_antall_treff': 'totaltAntallTreff',
        'treff_per_side': 'treffPerSide',
        'viser_fra': 'viserFra',
        'viser_til': 'viserTil'
    }

    def __init__(self, ascii_kompatibel=True, side=0, soke_streng=None, totalt_antall_treff=None, treff_per_side=10, viser_fra=None, viser_til=None):  # noqa: E501
        """HitMetadata - a model defined in Swagger"""  # noqa: E501
        self._ascii_kompatibel = None
        self._side = None
        self._soke_streng = None
        self._totalt_antall_treff = None
        self._treff_per_side = None
        self._viser_fra = None
        self._viser_til = None
        self.discriminator = None
        if ascii_kompatibel is not None:
            self.ascii_kompatibel = ascii_kompatibel
        if side is not None:
            self.side = side
        if soke_streng is not None:
            self.soke_streng = soke_streng
        if totalt_antall_treff is not None:
            self.totalt_antall_treff = totalt_antall_treff
        if treff_per_side is not None:
            self.treff_per_side = treff_per_side
        if viser_fra is not None:
            self.viser_fra = viser_fra
        if viser_til is not None:
            self.viser_til = viser_til

    @property
    def ascii_kompatibel(self):
        """Gets the ascii_kompatibel of this HitMetadata.  # noqa: E501

        Garanterer at dataene som returneres er ascii-kompatible.  # noqa: E501

        :return: The ascii_kompatibel of this HitMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._ascii_kompatibel

    @ascii_kompatibel.setter
    def ascii_kompatibel(self, ascii_kompatibel):
        """Sets the ascii_kompatibel of this HitMetadata.

        Garanterer at dataene som returneres er ascii-kompatible.  # noqa: E501

        :param ascii_kompatibel: The ascii_kompatibel of this HitMetadata.  # noqa: E501
        :type: bool
        """

        self._ascii_kompatibel = ascii_kompatibel

    @property
    def side(self):
        """Gets the side of this HitMetadata.  # noqa: E501

        Sidenummeret som vises. Første side = 0  # noqa: E501

        :return: The side of this HitMetadata.  # noqa: E501
        :rtype: int
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this HitMetadata.

        Sidenummeret som vises. Første side = 0  # noqa: E501

        :param side: The side of this HitMetadata.  # noqa: E501
        :type: int
        """

        self._side = side

    @property
    def soke_streng(self):
        """Gets the soke_streng of this HitMetadata.  # noqa: E501

        Søkestrengen som ble sendt inn til API-et.  # noqa: E501

        :return: The soke_streng of this HitMetadata.  # noqa: E501
        :rtype: str
        """
        return self._soke_streng

    @soke_streng.setter
    def soke_streng(self, soke_streng):
        """Sets the soke_streng of this HitMetadata.

        Søkestrengen som ble sendt inn til API-et.  # noqa: E501

        :param soke_streng: The soke_streng of this HitMetadata.  # noqa: E501
        :type: str
        """

        self._soke_streng = soke_streng

    @property
    def totalt_antall_treff(self):
        """Gets the totalt_antall_treff of this HitMetadata.  # noqa: E501

        Antall treff som søket returnerte.  # noqa: E501

        :return: The totalt_antall_treff of this HitMetadata.  # noqa: E501
        :rtype: int
        """
        return self._totalt_antall_treff

    @totalt_antall_treff.setter
    def totalt_antall_treff(self, totalt_antall_treff):
        """Sets the totalt_antall_treff of this HitMetadata.

        Antall treff som søket returnerte.  # noqa: E501

        :param totalt_antall_treff: The totalt_antall_treff of this HitMetadata.  # noqa: E501
        :type: int
        """

        self._totalt_antall_treff = totalt_antall_treff

    @property
    def treff_per_side(self):
        """Gets the treff_per_side of this HitMetadata.  # noqa: E501

        Antall treff per side.  # noqa: E501

        :return: The treff_per_side of this HitMetadata.  # noqa: E501
        :rtype: int
        """
        return self._treff_per_side

    @treff_per_side.setter
    def treff_per_side(self, treff_per_side):
        """Sets the treff_per_side of this HitMetadata.

        Antall treff per side.  # noqa: E501

        :param treff_per_side: The treff_per_side of this HitMetadata.  # noqa: E501
        :type: int
        """

        self._treff_per_side = treff_per_side

    @property
    def viser_fra(self):
        """Gets the viser_fra of this HitMetadata.  # noqa: E501

        Hvilket resultatnummer det første objektet du ser har.  # noqa: E501

        :return: The viser_fra of this HitMetadata.  # noqa: E501
        :rtype: int
        """
        return self._viser_fra

    @viser_fra.setter
    def viser_fra(self, viser_fra):
        """Sets the viser_fra of this HitMetadata.

        Hvilket resultatnummer det første objektet du ser har.  # noqa: E501

        :param viser_fra: The viser_fra of this HitMetadata.  # noqa: E501
        :type: int
        """

        self._viser_fra = viser_fra

    @property
    def viser_til(self):
        """Gets the viser_til of this HitMetadata.  # noqa: E501

        Hvilket resultatnummer det siste objektet du ser har.  # noqa: E501

        :return: The viser_til of this HitMetadata.  # noqa: E501
        :rtype: int
        """
        return self._viser_til

    @viser_til.setter
    def viser_til(self, viser_til):
        """Sets the viser_til of this HitMetadata.

        Hvilket resultatnummer det siste objektet du ser har.  # noqa: E501

        :param viser_til: The viser_til of this HitMetadata.  # noqa: E501
        :type: int
        """

        self._viser_til = viser_til

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HitMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HitMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
