# coding: utf-8

"""
    Åpent adresse-API fra Kartverket

    API for oppslag av adresser i matrikkelen.             Det er ikke nødvendig med innlogging/autorisasjon for å bruke API-et.             Større funksjonalitetsødeleggende endringer i API-et vil bli annonsert minst 3 måneder i forveien på https://geonorge.no/aktuelt/varsler/Tjenestevarsler/             API-et returnerer kun de første 10 000 resultatene. Hvis man ønsker å hente ned større datasett så anbefales det å laste ned filene som er tilgjengelige fra https://geonorge.no .           # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def punktsok_get(self, radius, lat, lon, **kwargs):  # noqa: E501
        """Geografisk punktsøk.  # noqa: E501

        Søk etter adresser innen en viss radius. Sortert etter distanse fra punkt. Respons inkluderer distansen fra punktet i meter. Geografiske koordinater må benyttes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.punktsok_get(radius, lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int radius: Radius for søket i hele meter (required)
        :param float lat: Geografiske lat/nord koordinater, med mindre annet er spesifisert. (required)
        :param float lon: Geografiske lon/øst koordinater, med mindre annet er spesifisert. (required)
        :param int treff_per_side: Antall treff per side.
        :param int side: Sidenummeret som vises. Første side = 0
        :param int utkoordsys: Koordinatsystem som adressegeometrien skal returneres i. Oppgis som srid, f.eks. 25833 eller 3857. Standardinnstilling er 4258
        :param bool ascii_kompatibel: Garanterer at dataene som returneres er ascii-kompatible.
        :param int koordsys: Koordinatsystem for punktet du søker etter. Oppgis som srid, f.eks. 25833 eller 3857. Standardinnstilling er 4258
        :param str filtrer: Kommaseparert liste med objekter du ikke ønsker å filtrere ut. For å hente ut underobjekter bruk \".\"-notasjon, f.eks.: &filtrer=adresser.kommunenummer,adresser.representasjonspunkt
        :return: OutputGeoPointList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.punktsok_get_with_http_info(radius, lat, lon, **kwargs)  # noqa: E501
        else:
            (data) = self.punktsok_get_with_http_info(radius, lat, lon, **kwargs)  # noqa: E501
            return data

    def punktsok_get_with_http_info(self, radius, lat, lon, **kwargs):  # noqa: E501
        """Geografisk punktsøk.  # noqa: E501

        Søk etter adresser innen en viss radius. Sortert etter distanse fra punkt. Respons inkluderer distansen fra punktet i meter. Geografiske koordinater må benyttes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.punktsok_get_with_http_info(radius, lat, lon, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int radius: Radius for søket i hele meter (required)
        :param float lat: Geografiske lat/nord koordinater, med mindre annet er spesifisert. (required)
        :param float lon: Geografiske lon/øst koordinater, med mindre annet er spesifisert. (required)
        :param int treff_per_side: Antall treff per side.
        :param int side: Sidenummeret som vises. Første side = 0
        :param int utkoordsys: Koordinatsystem som adressegeometrien skal returneres i. Oppgis som srid, f.eks. 25833 eller 3857. Standardinnstilling er 4258
        :param bool ascii_kompatibel: Garanterer at dataene som returneres er ascii-kompatible.
        :param int koordsys: Koordinatsystem for punktet du søker etter. Oppgis som srid, f.eks. 25833 eller 3857. Standardinnstilling er 4258
        :param str filtrer: Kommaseparert liste med objekter du ikke ønsker å filtrere ut. For å hente ut underobjekter bruk \".\"-notasjon, f.eks.: &filtrer=adresser.kommunenummer,adresser.representasjonspunkt
        :return: OutputGeoPointList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['radius', 'lat', 'lon', 'treff_per_side', 'side', 'utkoordsys', 'ascii_kompatibel', 'koordsys', 'filtrer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method punktsok_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'radius' is set
        if ('radius' not in params or
                params['radius'] is None):
            raise ValueError("Missing the required parameter `radius` when calling `punktsok_get`")  # noqa: E501
        # verify the required parameter 'lat' is set
        if ('lat' not in params or
                params['lat'] is None):
            raise ValueError("Missing the required parameter `lat` when calling `punktsok_get`")  # noqa: E501
        # verify the required parameter 'lon' is set
        if ('lon' not in params or
                params['lon'] is None):
            raise ValueError("Missing the required parameter `lon` when calling `punktsok_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'treff_per_side' in params:
            query_params.append(('treffPerSide', params['treff_per_side']))  # noqa: E501
        if 'radius' in params:
            query_params.append(('radius', params['radius']))  # noqa: E501
        if 'side' in params:
            query_params.append(('side', params['side']))  # noqa: E501
        if 'utkoordsys' in params:
            query_params.append(('utkoordsys', params['utkoordsys']))  # noqa: E501
        if 'ascii_kompatibel' in params:
            query_params.append(('asciiKompatibel', params['ascii_kompatibel']))  # noqa: E501
        if 'lat' in params:
            query_params.append(('lat', params['lat']))  # noqa: E501
        if 'koordsys' in params:
            query_params.append(('koordsys', params['koordsys']))  # noqa: E501
        if 'lon' in params:
            query_params.append(('lon', params['lon']))  # noqa: E501
        if 'filtrer' in params:
            query_params.append(('filtrer', params['filtrer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/punktsok', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutputGeoPointList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sok_get(self, **kwargs):  # noqa: E501
        """Standard søk.  # noqa: E501

        Søk etter adresser. Minst ett søkeparameter må benyttes. For generelle søk så anbefales det å benytte søkeparameteret \"sok\", og så eventuelt snevre inn resultatet ved å bruke de andre parameterene. For eksempel sok?sok=munkegata&kommunenummer=5001  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sok_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str adressenavn: Navn på gate, veg, sti, plass eller område som er ført i matrikkelen (eksempel Sørumvegen).
        :param int festenummer: Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knytning mot seksjon)
        :param str adressetekst: Offisiell adresse som tekststreng (eksempel «Ven, Sørumvegen 45»), men uten eventuelt bruksenhetsnummer for leiligheter
        :param int undernummer: Fortløpende nummerering av matrikkeladresser med samme gårds-, bruks- og festenummer.
        :param str sokemodus: Modifiserer \"sok\"-feltet, standardverdi er \"AND\". Velg om søket skal kreve at hver eneste søkeparameter finnes i treffet, eller om det holder med treff på kun ett parameter. F.eks. vil \"?sok=munkegata 1 trondheim&sokemodus=OR\" returnere alt som inneholder \"munkegata\" OG/ELLER tallet \"1\" OG/ELLER \"trondheim\".
        :param str bokstav: Del av adressenummer (husnummer) som er et nummer og en eventuelt en bokstav, f.eks 23B. For å kun søke på adresser uten noen bokstav så inkluderer man \"bokstav=\" i søkestrengen uten å fylle inn noen verdi.
        :param int side: Sidenummeret som vises. Første side = 0
        :param int bruksnummer: Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knyting mot seksjon)
        :param str postnummer: Unik identifikasjon av et postnummerområde. Tekstverdi som må bestå av 4 tall. 0340 er for eksempel gyldig, mens 340 er ikke gyldig.
        :param str objtype: Vegadresse er offisiell adresse i form av et adressenavn og et adressenummer (Storgata 10). Der kommunen ikke har gått over til vegadresser, vil det finnes matrikkeladresse på formen: gårdsnummer/ bruksnummer/ev festenummer-ev undernummer (10/2) Begge adressetypene kan ha bruksenhetsnummer (leiligheter) og adressetilleggsnavn. Begge adressetypene vises som standard, hvis man kun ønsker å se en av de kan man spesifisere adressetypen via dette parameteret.
        :param int adressekode: Nummer som entydig identifiserer adresserbare gater, veger, stier, plasser og områder som er ført i matrikkelen innen kommunen
        :param str adressetilleggsnavn: Nedarvet bruksnavn, navn på en institusjon eller bygning eller grend brukt som del av den offisielle adressen
        :param bool ascii_kompatibel: Garanterer at dataene som returneres er ascii-kompatible.
        :param str kommunenummer: Nummerering av kommunen i henhold til Statistisk sentralbyrå sin offisielle liste. Tekstverdi som må bestå av 4 tall. 0301 er for eksempel gyldig, mens 301 er ikke gyldig.
        :param str poststed: Navn på poststed i henhold til Postens egne lister
        :param int nummer: Del av adressenummer (husnummer) som er et nummer og eventuelt en bokstav, f.eks 23B
        :param int treff_per_side: Antall treff per side.
        :param str bruksenhetsnummer: Del av offisiell adresse (bruksenhetsnummer) til f.eks en leilighet i flerboligbygg. Bokstaven og de to første tallene angir etasje, de to siste angir leilighetens nummer i etasjen, regnet fra venstre mot høyre. Eksempel: \"H0102\", \"K0101\"
        :param int utkoordsys: Koordinatsystem som adressegeometrien skal returneres i. Oppgis som srid, f.eks. 25833 eller 3857. Standardinnstilling er 4258
        :param str sok: Generelt adressesøk over nesten alle feltene. Wildcard-søk med \"*\" er støttet. Flere detaljer vil gi mer nøyaktige søk. Bare legg til ekstra opplysninger adskilt med mellomrom. F.eks.: ?sok=munkegata 1 trondheim  
        :param str kommunenavn: Navn (norsk) på en kommune
        :param str filtrer: Kommaseparert liste med objekter du ikke ønsker å filtrere ut. For å hente ut underobjekter bruk \".\"-notasjon, f.eks.: &filtrer=adresser.kommunenummer,adresser.representasjonspunkt
        :param int gardsnummer: Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knyting mot seksjon)
        :return: OutputAdresseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sok_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sok_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sok_get_with_http_info(self, **kwargs):  # noqa: E501
        """Standard søk.  # noqa: E501

        Søk etter adresser. Minst ett søkeparameter må benyttes. For generelle søk så anbefales det å benytte søkeparameteret \"sok\", og så eventuelt snevre inn resultatet ved å bruke de andre parameterene. For eksempel sok?sok=munkegata&kommunenummer=5001  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sok_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str adressenavn: Navn på gate, veg, sti, plass eller område som er ført i matrikkelen (eksempel Sørumvegen).
        :param int festenummer: Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knytning mot seksjon)
        :param str adressetekst: Offisiell adresse som tekststreng (eksempel «Ven, Sørumvegen 45»), men uten eventuelt bruksenhetsnummer for leiligheter
        :param int undernummer: Fortløpende nummerering av matrikkeladresser med samme gårds-, bruks- og festenummer.
        :param str sokemodus: Modifiserer \"sok\"-feltet, standardverdi er \"AND\". Velg om søket skal kreve at hver eneste søkeparameter finnes i treffet, eller om det holder med treff på kun ett parameter. F.eks. vil \"?sok=munkegata 1 trondheim&sokemodus=OR\" returnere alt som inneholder \"munkegata\" OG/ELLER tallet \"1\" OG/ELLER \"trondheim\".
        :param str bokstav: Del av adressenummer (husnummer) som er et nummer og en eventuelt en bokstav, f.eks 23B. For å kun søke på adresser uten noen bokstav så inkluderer man \"bokstav=\" i søkestrengen uten å fylle inn noen verdi.
        :param int side: Sidenummeret som vises. Første side = 0
        :param int bruksnummer: Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knyting mot seksjon)
        :param str postnummer: Unik identifikasjon av et postnummerområde. Tekstverdi som må bestå av 4 tall. 0340 er for eksempel gyldig, mens 340 er ikke gyldig.
        :param str objtype: Vegadresse er offisiell adresse i form av et adressenavn og et adressenummer (Storgata 10). Der kommunen ikke har gått over til vegadresser, vil det finnes matrikkeladresse på formen: gårdsnummer/ bruksnummer/ev festenummer-ev undernummer (10/2) Begge adressetypene kan ha bruksenhetsnummer (leiligheter) og adressetilleggsnavn. Begge adressetypene vises som standard, hvis man kun ønsker å se en av de kan man spesifisere adressetypen via dette parameteret.
        :param int adressekode: Nummer som entydig identifiserer adresserbare gater, veger, stier, plasser og områder som er ført i matrikkelen innen kommunen
        :param str adressetilleggsnavn: Nedarvet bruksnavn, navn på en institusjon eller bygning eller grend brukt som del av den offisielle adressen
        :param bool ascii_kompatibel: Garanterer at dataene som returneres er ascii-kompatible.
        :param str kommunenummer: Nummerering av kommunen i henhold til Statistisk sentralbyrå sin offisielle liste. Tekstverdi som må bestå av 4 tall. 0301 er for eksempel gyldig, mens 301 er ikke gyldig.
        :param str poststed: Navn på poststed i henhold til Postens egne lister
        :param int nummer: Del av adressenummer (husnummer) som er et nummer og eventuelt en bokstav, f.eks 23B
        :param int treff_per_side: Antall treff per side.
        :param str bruksenhetsnummer: Del av offisiell adresse (bruksenhetsnummer) til f.eks en leilighet i flerboligbygg. Bokstaven og de to første tallene angir etasje, de to siste angir leilighetens nummer i etasjen, regnet fra venstre mot høyre. Eksempel: \"H0102\", \"K0101\"
        :param int utkoordsys: Koordinatsystem som adressegeometrien skal returneres i. Oppgis som srid, f.eks. 25833 eller 3857. Standardinnstilling er 4258
        :param str sok: Generelt adressesøk over nesten alle feltene. Wildcard-søk med \"*\" er støttet. Flere detaljer vil gi mer nøyaktige søk. Bare legg til ekstra opplysninger adskilt med mellomrom. F.eks.: ?sok=munkegata 1 trondheim  
        :param str kommunenavn: Navn (norsk) på en kommune
        :param str filtrer: Kommaseparert liste med objekter du ikke ønsker å filtrere ut. For å hente ut underobjekter bruk \".\"-notasjon, f.eks.: &filtrer=adresser.kommunenummer,adresser.representasjonspunkt
        :param int gardsnummer: Del av en matrikkeladresse der vegadresse ikke er innført, - eller vegadressens knytning til matrikkelenhet (grunneiendom eller feste, - gir her ikke knyting mot seksjon)
        :return: OutputAdresseList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['adressenavn', 'festenummer', 'adressetekst', 'undernummer', 'sokemodus', 'bokstav', 'side', 'bruksnummer', 'postnummer', 'objtype', 'adressekode', 'adressetilleggsnavn', 'ascii_kompatibel', 'kommunenummer', 'poststed', 'nummer', 'treff_per_side', 'bruksenhetsnummer', 'utkoordsys', 'sok', 'kommunenavn', 'filtrer', 'gardsnummer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sok_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'adressenavn' in params:
            query_params.append(('adressenavn', params['adressenavn']))  # noqa: E501
        if 'festenummer' in params:
            query_params.append(('festenummer', params['festenummer']))  # noqa: E501
        if 'adressetekst' in params:
            query_params.append(('adressetekst', params['adressetekst']))  # noqa: E501
        if 'undernummer' in params:
            query_params.append(('undernummer', params['undernummer']))  # noqa: E501
        if 'sokemodus' in params:
            query_params.append(('sokemodus', params['sokemodus']))  # noqa: E501
        if 'bokstav' in params:
            query_params.append(('bokstav', params['bokstav']))  # noqa: E501
        if 'side' in params:
            query_params.append(('side', params['side']))  # noqa: E501
        if 'bruksnummer' in params:
            query_params.append(('bruksnummer', params['bruksnummer']))  # noqa: E501
        if 'postnummer' in params:
            query_params.append(('postnummer', params['postnummer']))  # noqa: E501
        if 'objtype' in params:
            query_params.append(('objtype', params['objtype']))  # noqa: E501
        if 'adressekode' in params:
            query_params.append(('adressekode', params['adressekode']))  # noqa: E501
        if 'adressetilleggsnavn' in params:
            query_params.append(('adressetilleggsnavn', params['adressetilleggsnavn']))  # noqa: E501
        if 'ascii_kompatibel' in params:
            query_params.append(('asciiKompatibel', params['ascii_kompatibel']))  # noqa: E501
        if 'kommunenummer' in params:
            query_params.append(('kommunenummer', params['kommunenummer']))  # noqa: E501
        if 'poststed' in params:
            query_params.append(('poststed', params['poststed']))  # noqa: E501
        if 'nummer' in params:
            query_params.append(('nummer', params['nummer']))  # noqa: E501
        if 'treff_per_side' in params:
            query_params.append(('treffPerSide', params['treff_per_side']))  # noqa: E501
        if 'bruksenhetsnummer' in params:
            query_params.append(('bruksenhetsnummer', params['bruksenhetsnummer']))  # noqa: E501
        if 'utkoordsys' in params:
            query_params.append(('utkoordsys', params['utkoordsys']))  # noqa: E501
        if 'sok' in params:
            query_params.append(('sok', params['sok']))  # noqa: E501
        if 'kommunenavn' in params:
            query_params.append(('kommunenavn', params['kommunenavn']))  # noqa: E501
        if 'filtrer' in params:
            query_params.append(('filtrer', params['filtrer']))  # noqa: E501
        if 'gardsnummer' in params:
            query_params.append(('gardsnummer', params['gardsnummer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sok', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutputAdresseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
